{"ast":null,"code":"var _jsxFileName = \"/Users/james.franklin/code/personal/azure/swa/Meme-App/src/MemeGen.js\";\nimport React, { Component } from \"react\";\nimport DisplayMeme from './displayMeme';\n\nconst checkImageHeight = (width, height, maxHeight) => {\n  let newheight = height;\n  let newwidth = width;\n\n  if (height > maxHeight) {\n    let ratio = maxHeight / height;\n    newwidth = width * ratio;\n    newheight = maxHeight;\n  }\n\n  return {\n    newheight,\n    newwidth\n  };\n};\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super(); // Add a texts array insted of different text options,\n    // Use this array to store objects having details like \n    // Text, color, BColor, size, font?maybe\n    // Create a draw function which will be called after every change\n    // http://jsfiddle.net/m1erickson/9xAGa/\n\n    this.state = {\n      topText: \"\",\n      topColor: \"#000000\",\n      topBorderColor: \"#FFFFFF\",\n      bottomText: \"\",\n      bottomColor: \"#000000\",\n      bottomBorderColor: \"#FFFFFF\",\n      height: 335,\n      width: 568,\n      url: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n      image: undefined,\n      updateImage: false,\n      maxHeight: Math.floor(window.innerHeight * 0.8)\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.setImage = this.setImage.bind(this);\n    this.setText = this.setText.bind(this);\n    this.handleColorChnage = this.handleColorChnage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFileChange = this.handleFileChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const {\n        memes\n      } = response.data;\n      console.log(response.data);\n      this.setState({\n        allMemeImgs: memes\n      });\n    });\n    this.setImage();\n  }\n\n  setImage() {\n    const myCanvas = document.getElementById(\"my-canvas\");\n    const context = myCanvas.getContext(\"2d\");\n    const img = new Image();\n    const {\n      url,\n      width,\n      height,\n      maxHeight\n    } = this.state;\n    const {\n      newheight,\n      newwidth\n    } = checkImageHeight(width, height, maxHeight);\n    img.src = url;\n    console.log(\"setImage\", url, newwidth, newheight);\n\n    img.onload = () => {\n      myCanvas.height = newheight;\n      myCanvas.width = newwidth;\n      context.drawImage(img, 0, 0, width, height, 0, 0, newwidth, newheight);\n    };\n\n    this.setState({\n      image: img\n    });\n  }\n\n  setText() {\n    const myCanvas = document.getElementById(\"my-canvas\");\n    const context = myCanvas.getContext(\"2d\");\n    const {\n      image,\n      topText,\n      topColor,\n      topBorderColor,\n      bottomText,\n      bottomColor,\n      bottomBorderColor,\n      height,\n      width\n    } = this.state; // console.log(\"setText\",topText,bottomText)\n\n    context.drawImage(image, 0, 0, width, height, 0, 0, width, height);\n    context.font = \"2em impact, sans-serif\";\n    const topWidth = context.measureText(topText).width;\n    const bottomWidth = context.measureText(bottomText).width;\n    context.strokeStyle = topBorderColor;\n    context.strokeText(topText, width / 2 - topWidth / 2, 30);\n    context.strokeStyle = bottomBorderColor;\n    context.strokeText(bottomText, width / 2 - bottomWidth / 2, height - 10);\n    context.fillStyle = topColor;\n    context.fillText(topText, width / 2 - topWidth / 2, 30);\n    context.fillStyle = bottomColor;\n    context.fillText(bottomText, width / 2 - bottomWidth / 2, height - 10); // console.log(\"RENDER TEXT\");\n  }\n\n  handleColorChnage(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setTimeout(() => {\n      this.setState({\n        [name]: value\n      });\n    }, 250);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const {\n      url,\n      width,\n      height\n    } = this.state.allMemeImgs[randNum]; // console.log(\"handleSubmit\",url,width,height)\n\n    this.setState({\n      url: url,\n      width: width,\n      height: height,\n      updateImage: true\n    });\n  }\n\n  handleFileChange(event) {\n    const scope = this;\n    const url = window.URL.createObjectURL(event.target.files[0]);\n    const img = new Image();\n\n    img.onload = function () {\n      const {\n        newheight,\n        newwidth\n      } = checkImageHeight(this.width, this.height);\n      scope.setState({\n        url,\n        width: newwidth,\n        height: newheight,\n        updateImage: true\n      });\n    };\n\n    img.src = url;\n  }\n\n  componentDidUpdate() {\n    if (this.state.updateImage) {\n      this.setState({\n        updateImage: false\n      });\n      this.setImage();\n    }\n\n    this.setText();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(DisplayMeme, {\n      state: this.state,\n      handleSubmit: this.handleSubmit,\n      handleChange: this.handleChange,\n      handleColorChnage: this.handleColorChnage,\n      handleFileChange: this.handleFileChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/james.franklin/code/personal/azure/swa/Meme-App/src/MemeGen.js"],"names":["React","Component","DisplayMeme","checkImageHeight","width","height","maxHeight","newheight","newwidth","ratio","MemeGenerator","constructor","state","topText","topColor","topBorderColor","bottomText","bottomColor","bottomBorderColor","url","allMemeImgs","image","undefined","updateImage","Math","floor","window","innerHeight","componentDidMount","bind","setImage","setText","handleColorChnage","handleChange","handleSubmit","handleFileChange","fetch","then","response","json","memes","data","console","log","setState","myCanvas","document","getElementById","context","getContext","img","Image","src","onload","drawImage","font","topWidth","measureText","bottomWidth","strokeStyle","strokeText","fillStyle","fillText","event","name","value","target","setTimeout","preventDefault","randNum","random","length","scope","URL","createObjectURL","files","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport DisplayMeme from './displayMeme'\r\n\r\nconst checkImageHeight = (width, height, maxHeight) => {\r\n    let newheight = height\r\n    let newwidth = width\r\n    if (height>maxHeight){\r\n        let ratio = maxHeight/height\r\n        newwidth = width * ratio\r\n        newheight = maxHeight\r\n    }\r\n    return {newheight, newwidth}\r\n}\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super()\r\n        // Add a texts array insted of different text options,\r\n        // Use this array to store objects having details like \r\n        // Text, color, BColor, size, font?maybe\r\n\r\n        // Create a draw function which will be called after every change\r\n\r\n        // http://jsfiddle.net/m1erickson/9xAGa/\r\n        \r\n        this.state = {\r\n            topText: \"\",\r\n            topColor: \"#000000\",\r\n            topBorderColor: \"#FFFFFF\",\r\n            bottomText: \"\",\r\n            bottomColor: \"#000000\",\r\n            bottomBorderColor: \"#FFFFFF\",\r\n            height: 335,\r\n            width: 568,\r\n            url: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: [],\r\n            image: undefined,\r\n            updateImage: false,\r\n            maxHeight: Math.floor(window.innerHeight*0.8),\r\n        }\r\n        this.componentDidMount = this.componentDidMount.bind(this)\r\n        this.setImage = this.setImage.bind(this)\r\n        this.setText = this.setText.bind(this)\r\n        this.handleColorChnage = this.handleColorChnage.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleFileChange = this.handleFileChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { memes } = response.data\r\n                console.log(response.data);\r\n                this.setState({ allMemeImgs: memes })\r\n            })\r\n        this.setImage();\r\n    }\r\n\r\n    setImage() {\r\n        const myCanvas = document.getElementById(\"my-canvas\");\r\n        const context = myCanvas.getContext(\"2d\");\r\n        const img = new Image()\r\n        const { url, width, height, maxHeight } = this.state\r\n        const { newheight, newwidth } = checkImageHeight(width, height, maxHeight);\r\n        img.src = url\r\n        console.log(\"setImage\",url,newwidth,newheight)\r\n        img.onload = () => {\r\n            myCanvas.height = newheight\r\n            myCanvas.width = newwidth\r\n            context.drawImage(img, 0, 0, width, height, 0, 0, newwidth, newheight);\r\n        }\r\n        this.setState({ image: img })\r\n    }\r\n\r\n    setText() {\r\n        const myCanvas = document.getElementById(\"my-canvas\");\r\n        const context = myCanvas.getContext(\"2d\");\r\n        const { image, topText, topColor, topBorderColor, bottomText, bottomColor, bottomBorderColor, height, width } = this.state\r\n        // console.log(\"setText\",topText,bottomText)\r\n        context.drawImage(image, 0, 0, width, height, 0, 0, width, height);\r\n        context.font = \"2em impact, sans-serif\"\r\n\r\n        const topWidth = context.measureText(topText).width\r\n        const bottomWidth = context.measureText(bottomText).width\r\n        context.strokeStyle = topBorderColor\r\n        context.strokeText(topText, width / 2 - topWidth / 2, 30)\r\n        context.strokeStyle = bottomBorderColor\r\n        context.strokeText(bottomText, width / 2 - bottomWidth / 2, height - 10)\r\n        context.fillStyle = topColor\r\n        context.fillText(topText, width / 2 - topWidth / 2, 30)\r\n        context.fillStyle = bottomColor\r\n        context.fillText(bottomText, width / 2 - bottomWidth / 2, height - 10)\r\n\r\n        // console.log(\"RENDER TEXT\");\r\n    }\r\n    handleColorChnage(event) {\r\n        const { name, value } = event.target\r\n        setTimeout(() => {\r\n            this.setState({ [name]: value })\r\n        }, 250);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const { url, width, height } = this.state.allMemeImgs[randNum]\r\n        // console.log(\"handleSubmit\",url,width,height)\r\n        this.setState({ url: url, width: width, height: height, updateImage: true })\r\n    }\r\n\r\n    handleFileChange(event) {\r\n        const scope = this;\r\n        const url = window.URL.createObjectURL(event.target.files[0])\r\n        const img = new Image();\r\n        img.onload = function() {\r\n            const { newheight, newwidth } = checkImageHeight(this.width, this.height)\r\n            scope.setState({ url, width: newwidth, height: newheight, updateImage: true })\r\n        }\r\n        img.src = url;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.updateImage) {\r\n            this.setState({ updateImage: false })\r\n            this.setImage()\r\n        }\r\n        this.setText();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DisplayMeme \r\n                state={this.state} \r\n                handleSubmit={this.handleSubmit} \r\n                handleChange={this.handleChange}\r\n                handleColorChnage={this.handleColorChnage}\r\n                handleFileChange={this.handleFileChange} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator"]},"metadata":{},"sourceType":"module"}